{"ast":null,"code":"var _jsxFileName = \"C:\\\\Netflix_clone2\\\\home\\\\ubuntu\\\\Netflix-clone\\\\src\\\\pages\\\\signup.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport './signup.css';\nimport GlobalVideo from \"../components/GlobalVideo\";\nimport { supabase } from \"../supabase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Signup = () => {\n  _s();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const navigate = useNavigate();\n  const handleSignup = async e => {\n    e.preventDefault();\n    setError(\"\");\n    // Try to sign up directly\n    const {\n      error: signUpError\n    } = await supabase.auth.signUp({\n      email,\n      password\n    });\n    if (signUpError) {\n      if (signUpError.message.toLowerCase().includes(\"already registered\") || signUpError.message.toLowerCase().includes(\"user already exists\")) {\n        setError(\"This email is already registered. Please sign in.\");\n      } else {\n        setError(signUpError.message);\n      }\n      return;\n    }\n    // Optionally, you may want to check for email confirmation here\n    navigate(\"/email-confirmed\");\n  };\n  return /*#__PURE__*/_jsxDEV(GlobalVideo, {\n    src: \"/signup_bg.mp4\",\n    playbackRate: 0.8,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"signup-container\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSignup,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/Netflix_logo.png\",\n          alt: \"Netflix Logo\",\n          style: {\n            display: 'block',\n            margin: '0 auto 2rem',\n            width: '180px',\n            maxWidth: '80vw'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          placeholder: \"Email\",\n          value: email,\n          onChange: e => setEmail(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Password (min 6 chars)\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Sign Up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            textAlign: \"center\",\n            color: \"#f1f1f1\",\n            marginTop: \"1rem\"\n          },\n          children: [\"Already a member?\", ' ', /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"/login\",\n            style: {\n              color: \"#e50914\",\n              textDecoration: \"underline\"\n            },\n            children: \"Sign in\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(Signup, \"Ktx5ktSKAplPJrsY5gRTpmAHqe0=\", false, function () {\n  return [useNavigate];\n});\n_c = Signup;\nexport default Signup;\nvar _c;\n$RefreshReg$(_c, \"Signup\");","map":{"version":3,"names":["React","useState","useNavigate","GlobalVideo","supabase","jsxDEV","_jsxDEV","Signup","_s","email","setEmail","password","setPassword","error","setError","navigate","handleSignup","e","preventDefault","signUpError","auth","signUp","message","toLowerCase","includes","src","playbackRate","children","className","onSubmit","alt","style","display","margin","width","maxWidth","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","target","required","textAlign","color","marginTop","href","textDecoration","_c","$RefreshReg$"],"sources":["C:/Netflix_clone2/home/ubuntu/Netflix-clone/src/pages/signup.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport './signup.css';\nimport GlobalVideo from \"../components/GlobalVideo\";\nimport { supabase } from \"../supabase\";\n\nconst Signup = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const navigate = useNavigate();\n\n  const handleSignup = async (e) => {\n    e.preventDefault();\n    setError(\"\");\n    // Try to sign up directly\n    const { error: signUpError } = await supabase.auth.signUp({ email, password });\n    if (signUpError) {\n      if (signUpError.message.toLowerCase().includes(\"already registered\") || signUpError.message.toLowerCase().includes(\"user already exists\")) {\n        setError(\"This email is already registered. Please sign in.\");\n      } else {\n        setError(signUpError.message);\n      }\n      return;\n    }\n    // Optionally, you may want to check for email confirmation here\n    navigate(\"/email-confirmed\");\n  };\n\n  return (\n    <GlobalVideo src=\"/signup_bg.mp4\" playbackRate={0.8}>\n      <div className=\"signup-container\">   \n      <form onSubmit={handleSignup}>\n        <img src=\"/Netflix_logo.png\" alt=\"Netflix Logo\" style={{ display: 'block', margin: '0 auto 2rem', width: '180px', maxWidth: '80vw' }} />\n          <input\n            type=\"email\"\n            placeholder=\"Email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            required\n          />\n          <input\n            type=\"password\"\n            placeholder=\"Password (min 6 chars)\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            required\n          />\n          <button type=\"submit\">Sign Up</button>\n          {error && <p className=\"error\">{error}</p>}\n          <p style={{textAlign: \"center\", color: \"#f1f1f1\", marginTop: \"1rem\"}}>\n            Already a member?{' '}\n            <a href=\"/login\" style={{color: \"#e50914\", textDecoration: \"underline\"}}>Sign in</a>\n          </p>\n        </form>\n      </div>\n    </GlobalVideo>\n  );\n};\n\nexport default Signup;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}